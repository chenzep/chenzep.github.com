<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Chenzep的博客]]></title>
  <link href="http://yoursite.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2013-07-02T14:40:07+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Chenzep]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[android日记保存]]></title>
    <link href="http://yoursite.com/blog/2013/06/22/android-log/"/>
    <updated>2013-06-22T12:11:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/06/22/android-log</id>
    <content type="html"><![CDATA[<ol>
<li><p>概述<br/>
 这几天在调试Android系统的LOG保存功能，把系统所有的LOG都保存到指定文件中，方便应用调试使用。查了网上的一些文章，处理方法就两种：
 a) 拦截<code>system\core\liblog\Logd_write.c</code>中的<code>__android_log_buf_write</code>函数。
 b) 参考或者直接调用<code>logcat</code>命令，把<code>/dev/log/...</code>块文件中的记录读取出来，并保存到文件中。
 测试了一下，发现这两种方法都有缺点:
 a) <code>__android_log_buf_write</code>函数是进程相关的，如果通过条件变量来控制LOG是否保存，则条件变量必须要做成是进程共享的，这个有点麻烦。
 b)通过<code>logcat</code>方法，logcat本身会过滤掉一些优先级比较低的消息，还有就是保存文件大小方面不好控制。</p></li>
<li><p>代码流程<br/>
 简单概况下Log.v的函数的实现代码，详细的原理说明参考<a href="http://www.cnblogs.com/hoys/archive/2011/09/30/2196199.html">解读Android LOG机制的实现</a>。<br/>
 a. Log.v函数实现文件为：<code>frameworks\base\core\java\android\util\Log.java</code>。</p>

<pre><code> 函数直接调用JNI接口。

 public static int v(String tag, String msg, Throwable tr) {  
     return println_native(LOG_ID_MAIN, VERBOSE, tag, msg + '\n' + getStackTraceString(tr));
 }
</code></pre>

<p> b. JNI接口为：<code>android_util_Log_println_native</code>，实现文件是：<code>frameworks\base\core\jni\android_util_Log.cpp</code>，关键代码如下:</p>

<pre><code> static jint android_util_Log_println_native(JNIEnv* env, jobject clazz,
     jint bufID, jint priority, jstring tagObj, jstring msgObj)
 {
     ......
     #tag, msg是tagObj, msgObj转换后的const char*类型指针。
     int res = __android_log_buf_write(bufID, (android_LogPriority)priority, tag, msg);  
     ......
     return res;
 }
</code></pre>

<p> c. __android_log_buf_write函数的实现文件为:<code>system\core\liblog\Logd_write.c</code>,代码只是把相关数据封装在vec数组中，然后把数组传递给write_to_log函数，完整代码如下：</p>

<pre><code> int __android_log_buf_write(int bufID, int prio, const char *tag, const char *msg)
 {
     struct iovec vec[3];

     if (!tag)
         tag = "";

     /* XXX: This needs to go! */
     if (!strcmp(tag, "HTC_RIL") ||
         !strncmp(tag, "RIL", 3) || /* Any log tag with "RIL" as the prefix */
         !strcmp(tag, "AT") ||
         !strcmp(tag, "GSM") ||
         !strcmp(tag, "STK") ||
         !strcmp(tag, "CDMA") ||
         !strcmp(tag, "PHONE") ||
         !strcmp(tag, "SMS"))
             bufID = LOG_ID_RADIO;

     vec[0].iov_base   = (unsigned char *) &amp;prio;
     vec[0].iov_len    = 1;
     vec[1].iov_base   = (void *) tag;
     vec[1].iov_len    = strlen(tag) + 1;
     vec[2].iov_base   = (void *) msg;
     vec[2].iov_len    = strlen(msg) + 1;

     return write_to_log(bufID, vec, 3);
 }
</code></pre>

<p>  d. write_to_log最终会调用__write_to_log_kernel函数,函数就是往文件中写数据。</p>

<pre><code> static int __write_to_log_kernel(log_id_t log_id, struct iovec *vec, size_t nr)
 {
     ssize_t ret;
     int log_fd;

     if (/*(int)log_id &gt;= 0 &amp;&amp;*/ (int)log_id &lt; (int)LOG_ID_MAX) {
         log_fd = log_fds[(int)log_id];
     } else {
         return EBADF;
     }

     do {
         ret = log_writev(log_fd, vec, nr);
     } while (ret &lt; 0 &amp;&amp; errno == EINTR);

     return ret;
 }
</code></pre>

<p> e. log文件是一个字符设备文件，而且和普通的块设备还不太一样,有自己独立的实现代码，文件为<code>lichee\linux-3.0\drivers\staging\android\logger.c</code>。这里要说明的是实际的写函数:<code>logger_aio_write</code></p>

<pre><code> ssize_t logger_aio_write(struct kiocb *iocb, const struct iovec *iov,
      unsigned long nr_segs, loff_t ppos)
 {
     struct logger_log *log = file_get_log(iocb-&gt;ki_filp);
     size_t orig = log-&gt;w_off;
     struct logger_entry header;
     struct timespec now;
     ssize_t ret = 0;

     now = current_kernel_time();

     header.pid = current-&gt;tgid;
     header.tid = current-&gt;pid;
     header.sec = now.tv_sec;
     header.nsec = now.tv_nsec;
     header.len = min_t(size_t, iocb-&gt;ki_left, LOGGER_ENTRY_MAX_PAYLOAD);

     /* null writes succeed, return zero */
     if (unlikely(!header.len))
         return 0;

     mutex_lock(&amp;log-&gt;mutex);

     /*
      * Fix up any readers, pulling them forward to the first readable
      * entry after (what will be) the new write offset. We do this now
      * because if we partially fail, we can end up with clobbered log
      * entries that encroach on readable buffer.
      */
     fix_up_readers(log, sizeof(struct logger_entry) + header.len);

     #写入时间，进程等信息
     do_write_log(log, &amp;header, sizeof(struct logger_entry));
     #写入调试信息
     while (nr_segs-- &gt; 0) {
         size_t len;
         ssize_t nr;

         /* figure out how much of this vector we can keep */
         len = min_t(size_t, iov-&gt;iov_len, header.len - ret);

         /* write out this segment's payload */
         nr = do_write_log_from_user(log, iov-&gt;iov_base, len);
         if (unlikely(nr &lt; 0)) {
             log-&gt;w_off = orig;
             mutex_unlock(&amp;log-&gt;mutex);
             return nr;
         }

         iov++;
         ret += nr;
     }

     mutex_unlock(&amp;log-&gt;mutex);

     /* wake up any blocked readers */
     wake_up_interruptible(&amp;log-&gt;wq);

     return ret;
 }   
</code></pre></li>
<li><p>定制
 根据上面的代码流程，我们发现，在<code>logger_aio_write</code>添加保存LOG到文件中的功能是最好的，因为这里是内核层，也不存在进程共享的问题,而且也能捕获所有的LOG。
 比较头疼的问题有两个：
 a) 在内核层，很多函数都无法使用，比如fopen,fread,...fclose,rename等。还好，内核层有对应的函数。<br/>
 b) 内核层也存在着权限的问题，有些系统目录APP是没有权限访问此目录的，这个问题尚未解决。
 下面是一些代码片段:</p>

<pre><code> const char *pri = iov[0].iov_base;

 const char *tag ;
 const char *msg;
 int taglen,msglen;
 const char *pCur;
 int ret;

 taglen = iov[1].iov_len;
 msglen = iov[2].iov_len;
 ret = copy_from_user(kernelBuffer,      iov[1].iov_base, taglen);
 if (ret != 0) goto leave;
 ret = copy_from_user(kernelBuffer + taglen,     iov[2].iov_base, msglen);
 if (ret != 0) goto leave;
 tag = kernelBuffer;
 msg = kernelBuffer + taglen;
 pCur = msg;

 if (saveFlag) {
     struct file *fileLog;
     mm_segment_t old_fs = get_fs();
     set_fs(KERNEL_DS);
     mutex_lock(&amp;s_filemutex);
     fileLog = filp_open(path,O_CREAT|O_WRONLY,0666);
     if (!(IS_ERR(fileLog))) {
         int pos;
         int n;
         struct rtc_time tm;
         /filterPriToChar实现参考system\core\liblog\logprint.c文件
         char priChar = filterPriToChar(*pri);
         rtc_time_to_tm(header.sec, &amp;tm);    

         n = sprintf(buffer,"%c %02d-%02d %02d:%02d:%02d.%03d %05d/%05d ",
             priChar, 
             tm.tm_mon+1,tm.tm_mday,tm.tm_hour,tm.tm_min,tm.tm_sec, header.nsec / 1000000, 
             header.pid, header.tid);

         #使用printf("%s",tag)有问题，Why.不太清楚是不是我那里搞错，还是内核不支持
         if (taglen &gt; 1) {
             memcpy(buffer + n, tag, taglen -1);
             n += taglen - 1;
         }else{
             memcpy(buffer + n, "(null)", 6);
             n += 6;
         }
         buffer[n++] = ' ';

         if (msglen &gt; 1) {
             memcpy(buffer + n, msg, msglen -1);
             n += msglen - 1;
         }else{
             memcpy(buffer + n, "(null)", 6);
             n += 6;
         }
         buffer[n++] = '\n';

         fileLog-&gt;f_op-&gt;llseek(fileLog,0,2);
         fileLog-&gt;f_op-&gt;write(fileLog,buffer,n,&amp;fileLog-&gt;f_pos);
         pos = fileLog-&gt;f_pos;
         filp_close(fileLog,0);
     }
     mutex_unlock(&amp;s_filemutex);
     set_fs(old_fs);
 }
 leave:
     ret = 0;
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android备忘录]]></title>
    <link href="http://yoursite.com/blog/2013/06/20/android-memo/"/>
    <updated>2013-06-20T16:43:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/06/20/android-memo</id>
    <content type="html"><![CDATA[<p>1.开机动画</p>

<pre><code>开机动画的相关文件在`android4.0\frameworks\base\cmds\bootanimation`目录下.  
主要函数式BootAnimation中的bool BootAnimation::movie()函数。
</code></pre>
]]></content>
  </entry>
  
</feed>
